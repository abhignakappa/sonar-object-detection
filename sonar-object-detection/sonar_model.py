# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/187ek_x8NxVh1Kyg3oIj6L8qEykRqmMp6
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Loading the dataset to a pandas DataFrame
print("Loading dataset:")
sonar_data = pd.read_csv('/content/sonar_data.csv', header=None)

# Number of rows and columns
print("\nDataset Shape (rows, columns):")
print(sonar_data.shape)

# Statistical measures of the data
print("\nStatistical Description of Dataset:")
print(sonar_data.describe())

# Count of Rock (R) and Mine (M)
print("\nCount of Rock and Mine Labels:")
print(sonar_data[60].value_counts())

# Mean of each feature per label
print("\nMean of each column grouped by label (R/M):")
print(sonar_data.groupby(60).mean())

# Separating data and labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print("\nFeatures (X):")
print(X)

print("\nLabels (Y):")
print(Y)

# Splitting into training and testing data
print("\nSplitting data into training and testing sets:")
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)

print("\nShapes of datasets:")
print(f"X: {X.shape}, X_train: {X_train.shape}, X_test: {X_test.shape}")

print("\nTraining Feature Data (X_train):")
print(X_train)

print("\nTraining Labels (Y_train):")
print(Y_train)

# Model Training
print("\nTraining Logistic Regression model:")
model = LogisticRegression()
model.fit(X_train, Y_train)

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print("\nAccuracy on training data:", training_data_accuracy)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print("Accuracy on test data:", test_data_accuracy)

# Making a prediction on new input data
print("\nMaking a prediction on custom input data:")
input_data = (
    0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,
    0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,
    0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,
    0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,
    0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,
    0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055
)

# Changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Predict using the trained model
prediction = model.predict(input_data_reshaped)
print("\nPrediction for the input data:", prediction[0])

# Output result
if prediction[0] == 'R':
    print("The object is a Rock")
else:
    print("The object is a Mine")

